Q1: Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
 merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.

Code:  
    
    public class MergeArrays {

       public static void mergeArrays(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;
        
        // Set pointers to the last non-vacant elements
        int i = n - 1;
        int j = n - 1;
        int k = m - 1;
        
        // Merge arrays
        while (i >= 0 && j >= 0) {
            if (X[i] > Y[j]) {
                X[k] = X[i];
                i--;
            } else {
                X[k] = Y[j];
                j--;
            }
            k--;
        }
        
        // If there are remaining elements in Y
        while (j >= 0) {
            X[k] = Y[j];
            j--;
            k--;
        }
    }

    public static void main(String[] args) {
        int[] X = {2, 3, 7, 0, 0, 0};  // Vacant cells are represented by 0s
        int[] Y = {1, 5, 6};
        
        mergeArrays(X, Y);
        
        // Print merged array X
        for (int num : X) {
            System.out.print(num + " ");
        }
    }
}

For example,

Input: X[] = { 0, 2, 0, 3, 0, 5, 6, 0, 0 }
Y[] = { 1, 8, 9, 10, 15 } The vacant cells in X[] is represented by 0 
Output: X[] = { 1, 2, 3, 5, 6, 8, 9, 10, 15 }

Q2:Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements.

Code:  

   import java.util.Arrays;

    public class MergeArrays {

    public static void mergeArrays(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;
        
        // Set pointers to the last non-vacant elements
        int i = m - n - 1; // Index of the last element in X before the vacant cells
        int j = n - 1;
        int k = m - 1;
        
        // Merge arrays
        while (i >= 0 && j >= 0) {
            if (X[i] > Y[j]) {
                X[k] = X[i];
                i--;
            } else {
                X[k] = Y[j];
                j--;
            }
            k--;
        }
        
        // If there are remaining elements in Y
        while (j >= 0) {
            X[k] = Y[j];
            j--;
            k--;
        }
    }

    public static void main(String[] args) {
        int[] X = {0, 2, 0, 3, 0, 5, 6, 0, 0};
        int[] Y = {1, 8, 9, 10, 15};
        
        mergeArrays(X, Y);
        
        // Print merged array X
        System.out.println("Merged array: " + Arrays.toString(X));
    }
}

For example,

Input: X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 }
Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 }  
The maximum sum path is: 1 —> 2 —> 3 —> 6 —> 7 —> 9 —> 10 —> 12 —> 15 —> 16 —> 18 —> 100 
The maximum sum is 199

Q3:Write a Java Program to count the number of words in a string using HashMap.

Code:
import java.util.HashMap;

public class WordCounter {

    public static HashMap<String, Integer> countWords(String str) {
        HashMap<String, Integer> wordCountMap = new HashMap<>();

        // Split the string into words
        String[] words = str.split("\\s+");

        // Count the occurrence of each word
        for (String word : words) {
            // Remove any non-alphabetic characters and convert to lowercase
            word = word.replaceAll("[^a-zA-Z]", "").toLowerCase();

            // Update the word count in the map
            if (!word.isEmpty()) {
                wordCountMap.put(word, wordCountMap.getOrDefault(word, 0) + 1);
            }
        }

        return wordCountMap;
    }

    public static void main(String[] args) {
        String sentence = "This is a sample sentence with some words. This is another sentence.";

        HashMap<String, Integer> wordCountMap = countWords(sentence);

        System.out.println("Word Count:");
        for (String word : wordCountMap.keySet()) {
            System.out.println(word + ": " + wordCountMap.get(word));
        }
    }
}

Q4:Write a Java Program to find the duplicate characters in a string.

Code:

  import java.util.HashMap;

public class DuplicateCharacters {

    public static void findDuplicateCharacters(String str) {
        
        HashMap<Character, Integer> charCountMap = new HashMap<>();

        // Convert string into lowercase cause of case-sensitive
        str = str.toLowerCase();

        // Iteration process
        for (char ch : str.toCharArray()) {
            // Increment the count for each character
            charCountMap.put(ch, charCountMap.getOrDefault(ch, 0) + 1);
        }

        // Print duplicates characters
        System.out.println("Duplicate characters in the string:");
        for (char ch : charCountMap.keySet()) {
            if (charCountMap.get(ch) > 1) {
                System.out.println(ch);
            }
        }
    }

    public static void main(String[] args) {
        String inputString = "This is a sample string with some duplicate characters.";
        findDuplicateCharacters(inputString);
    }
}
